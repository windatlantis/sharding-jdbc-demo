spring:
  shardingsphere:
    props:
      sql-show: true # 是否打印sql

    datasource:
      names: ds0,ds1,readds0,readds1
      ds0:
        username: root
        password: 123456
        url: jdbc:mysql://localhost:3306/ds0?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource
      ds1:
        username: root
        password: 123456
        url: jdbc:mysql://localhost:3306/ds1?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource
      readds0:
        username: root
        password: 123456
        url: jdbc:mysql://localhost:3307/ds0?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource
      readds1:
        username: root
        password: 123456
        url: jdbc:mysql://localhost:3307/ds1?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource

    rules:
      #读写分离
      readwrite-splitting:
        data-sources:
          ds0:
            static-strategy:
              write-data-source-name: ds0
              read-data-source-names: readds0
            load-balancer-name: round
          ds1:
            static-strategy:
              write-data-source-name: ds1
              read-data-source-names: readds1
            load-balancer-name: round
        load-balancers:
          round:
            # ROUND_ROBIN 会受到hibernate的autocommit=false影响,而TRANSACTION_ROUND_ROBIN则不会
            # https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/load-balance/
            type: TRANSACTION_ROUND_ROBIN

      sharding:
        #分库分表
        tables:
          t_order:
            #数据节点
            actual-data-nodes: ds$->{0..1}.t_order_$->{0..1}
            key-generate-strategy:
              key-generator-name: snowflake
              column: order_id
            #分库策略
            database-strategy:
              standard:
                #列名称，多个列以逗号分隔
                sharding-column: user_id
                sharding-algorithm-name: database_inline
            #分表策略
            table-strategy:
              standard:
                #分片列
                sharding-column: order_id
                sharding-algorithm-name: t_order_inline
        key-generators:
          snowflake:
            type: SNOWFLAKE
        sharding-algorithms:
          database_inline:
            #行表达式
            type: INLINE
            props:
              algorithm-expression: ds$->{user_id % 2}
          t_order_inline:
            #行表达式
            type: INLINE
            props:
              algorithm-expression: t_order_$->{order_id % 2}
